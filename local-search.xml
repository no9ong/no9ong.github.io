<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>高效的用GitHub搜索开源项目</title>
    <link href="/2022/10/20/%E9%AB%98%E6%95%88%E7%9A%84%E7%94%A8GitHub%E6%90%9C%E7%B4%A2%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    <url>/2022/10/20/%E9%AB%98%E6%95%88%E7%9A%84%E7%94%A8GitHub%E6%90%9C%E7%B4%A2%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<p>| 在github搜索时，可以通过关键字来限定，让搜索结果更准确。</p><h2 id="1-in"><a href="#1-in" class="headerlink" title="1.in"></a>1.in</h2><p>| 关键字 in 是用来限定搜索的范围</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">in:</span>name 在名字中过滤<br><span class="hljs-symbol">in:</span>readme 在 Readme 中搜索<br><span class="hljs-symbol">in:</span>description 在简介中搜索<br></code></pre></td></tr></table></figure><h2 id="2-stars-、forks"><a href="#2-stars-、forks" class="headerlink" title="2.stars 、forks"></a>2.stars 、forks</h2><p>| stars（收藏） 和 forks（） 一般是两个比较关系的指标，可以通过 stars 和 forks 条件来过滤高质量的项目</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">in</span>:description Laravel stars:&gt;<span class="hljs-number">1000</span> forks:&gt;<span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><h2 id="3-language-编程语言"><a href="#3-language-编程语言" class="headerlink" title="3.language 编程语言"></a>3.language 编程语言</h2><p>| 我们也能根据编程语言过滤，使用language: </p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">in:</span>description 验证码 language:php<br></code></pre></td></tr></table></figure><h2 id="4-pushed、created-更新日期、创建日期"><a href="#4-pushed、created-更新日期、创建日期" class="headerlink" title="4.pushed、created 更新日期、创建日期"></a>4.pushed、created 更新日期、创建日期</h2><p>| 们可以使用 pushed、created 来根据时间过滤</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">in:description 验证码 language:php pushed:&gt;2022-10-20 # 过滤大于 2022-10-20之后提交的<br>in:description 验证码 language:php created:&gt;2022-10-02 # 过滤大于 2022-10-02创建的<br></code></pre></td></tr></table></figure><h2 id="5-followers-被关注人数"><a href="#5-followers-被关注人数" class="headerlink" title="5.followers 被关注人数"></a>5.followers 被关注人数</h2><p>| 当然我们也可以根据高级搜索来找大佬。比如我们要找在中国区域内，followers 大于 1000 的，并且编程语言是 PHP 的 我们可以这样搜素。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">followers:&gt;<span class="hljs-number">1000</span> <span class="hljs-keyword">language</span>:PHP <span class="hljs-keyword">location</span>:China<br></code></pre></td></tr></table></figure><h2 id="6-限定人或组织"><a href="#6-限定人或组织" class="headerlink" title="6. 限定人或组织"></a>6. 限定人或组织</h2><p>| 在查找某个人或者某个组织的项目时，通过 user 来过滤</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">user:</span>overtrue<br><span class="hljs-symbol">user:</span>laravel<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>GIT</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker参数记录</title>
    <link href="/2022/10/18/Docker%E5%8F%82%E6%95%B0%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/10/18/Docker%E5%8F%82%E6%95%B0%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h3 id="容器生命周期管理"><a href="#容器生命周期管理" class="headerlink" title="容器生命周期管理"></a>容器生命周期管理</h3><p>1、dcoker run      &#x2F;&#x2F;创建一个新的容器并运行一个命令</p><pre><code class="hljs">-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；-d: 后台运行容器，并返回容器ID；-i: 以交互模式运行容器，通常与 -t 同时使用；-P: 随机端口映射，容器内部端口随机映射到主机的端口-p: 指定端口映射，格式为：主机(宿主)端口:容器端口-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</code></pre><p>    –restart&#x3D;always : 设置容器自启；<br>    –name&#x3D;”nginx-lb”: 为容器指定一个名称；<br>    –dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；<br>    –dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；<br>    -h “no9host”: 指定容器的hostname；<br>    -e username&#x3D;”ritchie”: 设置环境变量；<br>    –env-file&#x3D;[]: 从指定文件读入环境变量；<br>    –cpuset&#x3D;”0-2” or –cpuset&#x3D;”0,1,2”: 绑定容器到指定CPU运行；<br>    -m :设置容器使用内存最大值；<br>    –net&#x3D;”bridge”: 指定容器的网络连接类型，支持 bridge&#x2F;host&#x2F;none&#x2F;container: 四种类型；<br>    –link&#x3D;[]: 添加链接到另一个容器；<br>    –expose&#x3D;[]: 开放一个端口或一组端口；<br>    –volume , -v: 绑定一个卷</p><p>2、docker kill     &#x2F;&#x2F;杀掉一个运行中的容器</p><pre><code class="hljs">-s :向容器发送一个信号</code></pre><p>3、docker rm       &#x2F;&#x2F;删除一个或多个容器</p><pre><code class="hljs">-f :通过 SIGKILL 信号强制删除一个运行中的容器。-l :移除容器间的网络连接，而非容器本身。-v :删除与容器关联的卷。</code></pre><p>4、docker exec     &#x2F;&#x2F;在运行的容器中执行命令</p><pre><code class="hljs">-d :分离模式: 在后台运行-i :即使没有附加也保持STDIN 打开-t :分配一个伪终端</code></pre><p>5、docker create   &#x2F;&#x2F;创建一个新的容器但不启动它</p><p>6、docker pause    &#x2F;&#x2F;暂停容器中所有的进程</p><p>7、docker unpause  &#x2F;&#x2F;恢复容器中所有的进程</p><p>8、docker start    &#x2F;&#x2F;启动一个或多个已经被停止的容器</p><p>9、docker stop     &#x2F;&#x2F;停止一个运行中的容器</p><p>10、docker restart  &#x2F;&#x2F;重启容器</p><p>11、取消容器自启</p><p>docker update –restart&#x3D;no 容器id 或 容器名称</p><p>12、批量设置容器自启</p><p>docker update –restart&#x3D;always $(docker ps -aq)</p><h3 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h3><p>1、docker ps        &#x2F;&#x2F;列出容器</p><pre><code class="hljs">-a :显示所有的容器，包括未运行的。-f :根据条件过滤显示的内容。--format :指定返回值的模板文件。-l :显示最近创建的容器。-n :列出最近创建的n个容器。--no-trunc :不截断输出。-q :静默模式，只显示容器编号。-s :显示总的文件大小。</code></pre><p>2、docker inspect   &#x2F;&#x2F;获取容器&#x2F;镜像的元数据</p><pre><code class="hljs">-f :指定返回值的模板文件。-s :显示总的文件大小。--type :为指定类型返回JSON。</code></pre><p>3、docker events    &#x2F;&#x2F;从服务器获取实时事件</p><pre><code class="hljs">-f ：根据条件过滤事件；--since ：从指定的时间戳后显示所有事件;--until ：流水时间显示到指定的时间为止；</code></pre><p>4、docker export    &#x2F;&#x2F;将文件系统作为一个tar归档文件导出到STDOUT</p><pre><code class="hljs">-o :将输入内容写到文件。</code></pre><p>5、docker port      &#x2F;&#x2F;列出指定的容器的端口映射，或者查找将PRIVATE_PORT NAT到面向公众的端口</p><p>6、docker top       &#x2F;&#x2F;查看容器中运行的进程信息，支持 ps 命令参数</p><p>7、docker logs      &#x2F;&#x2F;获取容器的日志</p><p>8、docker attach    &#x2F;&#x2F;连接到正在运行中的容器</p><p>9、docker wait      &#x2F;&#x2F;阻塞运行直到容器停止，然后打印出它的退出代码</p><h3 id="容器rootfs命令"><a href="#容器rootfs命令" class="headerlink" title="容器rootfs命令"></a>容器rootfs命令</h3><p>1、docker commit    &#x2F;&#x2F;从容器创建一个新的镜像</p><pre><code class="hljs">-a :提交的镜像作者；-c :使用Dockerfile指令来创建镜像；-m :提交时的说明文字；-p :在commit时，将容器暂停。</code></pre><p>2、docker diff      &#x2F;&#x2F;检查容器里文件结构的更改</p><pre><code class="hljs">-L :保持源目标中的链接</code></pre><p>3、docker cp        &#x2F;&#x2F;用于容器与主机之间的数据拷贝</p><h3 id="镜像仓库"><a href="#镜像仓库" class="headerlink" title="镜像仓库"></a>镜像仓库</h3><h4 id="设置镜像加速"><a href="#设置镜像加速" class="headerlink" title="设置镜像加速"></a>设置镜像加速</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>，使用以下命令直接从该镜像加速地址进行拉取。<br>命令：docker pull registry.docker-cn.com<span class="hljs-regexp">/myname/my</span>repo:mytag<br>例：docker pull registry.docker-cn.com<span class="hljs-regexp">/library/u</span>buntu:<span class="hljs-number">16.10</span><br>注:除非修改了Docker守护进程的–registry-mirror参数,<br>否则需要完整地指定镜像的名称。例，library<span class="hljs-regexp">/ubuntu、library/</span>redis、library/nginx。<br><span class="hljs-number">2</span>，使用 --registry-mirror配置Docker守护进程加速。<br>★临时生效：<br>Docker守护进程启动时传入 --registry-mirror 参数：<br><span class="hljs-comment"># docker --registry-mirror=https://xxxxxxxx.mirror.aliyuncs.com daemon</span><br>★永久生效：<br>通过配置文件启动Docker,修改<span class="hljs-regexp">/etc/</span>docker/daemon.json 文件并添加上 registry-mirrors 键值。<br>vim <span class="hljs-regexp">/etc/</span>docker/daemon.json<br>◆配置镜像加速<span class="hljs-number">1</span>：<br>阿里的镜像地址：https:<span class="hljs-regexp">//</span>xxxxxxxx.mirror.aliyuncs.com(私人账号地址)<br>&#123;<br><span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://xxxxxxxx.mirror.aliyuncs.com&quot;</span>]<br>&#125;<br>•可以配置多个镜像加速地址，用逗号分隔。<br><span class="hljs-string">&quot;registry-mirrors&quot;</span>:[<span class="hljs-string">&quot;https://registry.docker.cn.com&quot;</span>,<span class="hljs-string">&quot;https://xxxxxxxx.mirror.aliyuncs.com&quot;</span>]<br><br>◆配置镜像加速<span class="hljs-number">2</span>：<br>文档参考：https:<span class="hljs-regexp">//</span>www.daocloud.io/mirror<br>Linux下命令：<br>curl -sSL https:<span class="hljs-regexp">//g</span>et.daocloud.io<span class="hljs-regexp">/daotools/</span>set_mirror.sh | sh -s http:<span class="hljs-regexp">//</span>f1361db2.m.daocloud.io<br>&#123;<br><span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://xxxxxxxx.m.daocloud.io&quot;</span>]<br>&#125;<br><br>★临时使用：<br>•使用<span class="hljs-number">163</span>的docker仓库，拉取镜像<br>网易的镜像地址：http:<span class="hljs-regexp">//</span>hub.c.<span class="hljs-number">163</span>.com<br>docker pull hub.c.<span class="hljs-number">163</span>.com<span class="hljs-regexp">/public/</span>centos:<span class="hljs-number">7.2</span><br><br><span class="hljs-number">3</span>，修改保存后，重启Docker以使配置生效。<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker<br><br><span class="hljs-number">4</span>，查看配置是否生效。<br>执行docker info，查看是否含有如下信息：<br>Registry Mirrors:<br>https:<span class="hljs-regexp">//</span>xxxxxxxx.mirror.aliyuncs.com/<br><br></code></pre></td></tr></table></figure><p>1、docker login   &#x2F;&#x2F;登陆到Docker镜像仓库，未指定镜像仓库地址默认官方仓库DockerHub</p><pre><code class="hljs">-u :登陆的用户名-p :登陆的密码</code></pre><p>2、docker logout  &#x2F;&#x2F;登出Docker镜像仓库，未指定镜像仓库地址默认官方仓库DockerHub</p><p>3、docker pull    &#x2F;&#x2F;从镜像仓库中拉取或者更新指定镜像</p><pre><code class="hljs">-a :拉取所有 tagged 镜像--disable-content-trust :忽略镜像的校验,默认开启</code></pre><p>4、docker push    &#x2F;&#x2F;将本地的镜像上传到镜像仓库,要先登陆到镜像仓库</p><pre><code class="hljs">--disable-content-trust :忽略镜像的校验,默认开启</code></pre><p>5、docker search  &#x2F;&#x2F;从Docker Hub查找镜像</p><pre><code class="hljs">--automated :只列出 automated build类型的镜像；--no-trunc :显示完整的镜像描述；-f &lt;过滤条件&gt;:列出收藏数不小于指定值的镜像。</code></pre><h3 id="本地镜像管理"><a href="#本地镜像管理" class="headerlink" title="本地镜像管理"></a>本地镜像管理</h3><p>1、docker images    &#x2F;&#x2F;列出本地镜像</p><pre><code class="hljs">-a :列出本地所有的镜像（含中间映像层，默认情况下，过滤掉中间映像层）；--digests :显示镜像的摘要信息；-f :显示满足条件的镜像；--format :指定返回值的模板文件；--no-trunc :显示完整的镜像信息；-q :只显示镜像ID。</code></pre><p>2、docker rmi       &#x2F;&#x2F;删除本地一个或多个镜像</p><pre><code class="hljs">-f :强制删除；--no-prune :不移除该镜像的过程镜像，默认移除；</code></pre><p>3、docker build     &#x2F;&#x2F;命令用于使用 Dockerfile 创建镜像</p><pre><code class="hljs">--build-arg=[] :设置镜像创建时的变量；--cpu-shares :设置 cpu 使用权重；--cpu-period :限制 CPU CFS周期；--cpu-quota :限制 CPU CFS配额；--cpuset-cpus :指定使用的CPU id；--cpuset-mems :指定使用的内存 id；--disable-content-trust :忽略校验，默认开启；-f :指定要使用的Dockerfile路径；--force-rm :设置镜像过程中删除中间容器；--isolation :使用容器隔离技术；--label=[] :设置镜像使用的元数据；-m :设置内存最大值；--memory-swap :设置Swap的最大值为内存+swap，&quot;-1&quot;表示不限swap；--no-cache :创建镜像的过程不使用缓存；--pull :尝试去更新镜像的新版本；--quiet, -q :安静模式，成功后只输出镜像 ID；--rm :设置镜像成功后删除中间容器；--shm-size :设置/dev/shm的大小，默认值是64M；--ulimit :Ulimit配置。--squash :将 Dockerfile 中所有的操作压缩为一层。--tag, -t:镜像名字及标签，通常name:tag或者name格式；可在一次构建中为一个镜像设置多个标签。--network: 默认 default。在构建期间设置RUN指令的网络模式</code></pre><p>4、docker tag       &#x2F;&#x2F;标记本地镜像，将其归入某一仓库</p><p>5、docker history   &#x2F;&#x2F;查看指定镜像的创建历史</p><pre><code class="hljs">-H :以可读的格式打印镜像大小和日期，默认为true；--no-trunc :显示完整的提交记录；-q :仅列出提交记录ID。</code></pre><p>6、docker save      &#x2F;&#x2F;将指定镜像保存成 tar 归档文件</p><pre><code class="hljs">-o :输出到的文件。</code></pre><p>7、docker load      &#x2F;&#x2F;导入使用 docker save 命令导出的镜像</p><pre><code class="hljs">--input , -i : 指定导入的文件，代替 STDIN。--quiet , -q : 精简输出信息。</code></pre><p>8、docker import    &#x2F;&#x2F;从归档文件中创建镜像</p><pre><code class="hljs">-c :应用docker 指令创建镜像；-m :提交时的说明文字；</code></pre>]]></content>
    
    
    <categories>
      
      <category>Linux折腾</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Start Blog</title>
    <link href="/2022/10/08/Start-Blog/"/>
    <url>/2022/10/08/Start-Blog/</url>
    
    <content type="html"><![CDATA[<h1 id="为什么要做这个博客"><a href="#为什么要做这个博客" class="headerlink" title="为什么要做这个博客"></a>为什么要做这个博客</h1><blockquote><p>对学习的一个记录</p><p>提供持续不断学习的动力</p><p>积累更多的知识</p><p>记录自己的成长过程</p><p>培养自己持续做一件事的能力</p><p>认识更多志同道合的人</p><p>以后自己复习还能用的到</p><p>写博客能给自己一种自豪感</p></blockquote><blockquote><p>如果能够将一个知识点通俗易懂的讲出来并且让别人听懂，那么就说明你真的对这个知识点掌握了，这就是著名的费曼学习法。</p></blockquote><p><img src="/images/%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95.png" alt="pic"></p><blockquote><p>费曼学习法的原理就是：教就是最好的学，通过将自己理解的东西教授给他人，这样学习留存率高达90%，而简单的阅读留存率只能达到10%，在传授的过程中，触类旁通，举一反三。</p></blockquote><h1 id="Blog-LOG-↓"><a href="#Blog-LOG-↓" class="headerlink" title="Blog LOG ↓"></a>Blog LOG ↓</h1><h2 id="2022-10-08-Blog-Start"><a href="#2022-10-08-Blog-Start" class="headerlink" title="2022-10-08 Blog Start"></a>2022-10-08 Blog Start</h2><p>使用<a href="https://hexo.io/zh-cn/">hexo</a>+<a href="https://pages.github.com/">GitHubPages</a> 创建个人博客，用于记录学习。</p><h2 id="2022-10-09-美化博客"><a href="#2022-10-09-美化博客" class="headerlink" title="2022-10-09 美化博客"></a>2022-10-09 美化博客</h2><p>主题修改为 <a href="https://hexo.fluid-dev.com/">Fluid</a> ，添加评论系统.<br>感谢 <a href="https://www.leancloud.cn/">leancloud</a> 提供评论数据存储服务</p>]]></content>
    
    
    <categories>
      
      <category>随写</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
